///
//  ViewController.swift
//  AV Foundation
//
//  Created by Pranjal Satija on 5/22/17.
//  Copyright © 2017 Pranjal Satija. All rights reserved.
//

import UIKit
import Photos
import CoreData

class ViewController003b: UIViewController {
    
    
    var imagenes : [Day] = []
    
    var soloFotos: [Day] = []
   
    var currentTask:Task?
    
    
    
    var imageSave:UIImage?
    public var getCurrentDay:String?
    public var getComment:String?
    public var getLastPhoto:UIImage?
    
    @IBOutlet weak var switchPreview: UISwitch!
    @IBOutlet weak var commentPhotoLabelVC003: UILabel!
    @IBOutlet weak var imageToSave: UIImageView!
    @IBOutlet weak var viewSave: UIView!
    
    @IBOutlet weak var currentDayLabelVC003: UILabel!
    
    @IBOutlet weak var previewDateTemp: UIImageView!
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!

    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
   
    let cameraController = CameraController()
    
    override var prefersStatusBarHidden: Bool { return true }

    @IBAction func cancelGesture(_ sender: Any) {
        animationON(disponible: false)
        self.imageSave = nil
    }
    @IBAction func actionDone(_ sender: Any) {
       
        self.animationON(disponible: false)
        
        if self.imageSave != nil{
            
            if getComment == nil  {getComment = ""}
            
            guardarImagen(unaImagen: self.imageSave!, unComentario: getComment!)
           
            self.imageSave = nil
            self.getComment = nil
        }
        
        _ = navigationController?.popViewController(animated: true)
        
    }
    @IBAction func actionRefresh(_ sender: Any) {
        self.animationON(disponible: false)
         self.imageSave = nil
    }
    @IBAction func switchPreviewPhoto(_ sender: UISwitch) {
        
        if sender.isOn {
            previewDateTemp.isHidden = false
            
           
        }else {
            previewDateTemp.isHidden = true
            
        }
    }
    override func viewWillDisappear(_ animated: Bool) {
        previewDateTemp.isHidden = true
    }
}
extension ViewController003b {
   
    override func viewDidLoad() {
        
        presentSaveView()
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
    
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
        styleCaptureButton()
        configureCameraController()
        configureSWitchPreview()
        
        if getLastPhoto != nil {
            
            self.previewDateTemp.image = getLastPhoto
            
        }
        
        navigationController!.delegate = self
        
    }
    
    func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {
       
        
        if ((viewController as? ViewController002) != nil) {
//
//            if self.imageSave != nil{
//
//                if getComment == nil {
//                    getComment = ""
//                }
//                (viewController as? ViewController002)?.guardarImagen(unaImagen: self.imageSave!, unComentario: getComment!)
//                self.imageSave = nil
//                self.getComment = nil
//            }
        }
    }
    
    //    MARK : - METODOS DE GUARDADO
    func conexion()-> NSManagedObjectContext {
        
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        return appDelegate.persistentContainer.viewContext
        
    }
    func guardarImagen(unaImagen:UIImage, unComentario:String?){
        
        let nota = Day(context: self.conexion())
        nota.dateRecord = NSDate()
        nota.coments = unComentario!
        
        let imageData = unaImagen.jpegData(compressionQuality: 0.25) as Data?
        
        nota.photoAdd = imageData! as NSData
        
        if let task = self.currentTask,
            let notas = task.days?.mutableCopy() as? NSMutableOrderedSet {
            notas.add(nota)
            task.days = notas
        }
        
        do {
            
            try self.conexion().save()
            print("guardado")
            
        } catch let error as NSError {
            print("Ha ocurrido un error",error.localizedDescription)
        }
        
    }
    func animationON(disponible:Bool) {
       
        if disponible {
            UIView.animate(withDuration: 0.25, animations: {
                
                self.viewSave.frame = CGRect(x: 0, y: self.viewSave.frame.origin.y-self.view.frame.height+50, width: self.viewSave.frame.width, height: self.viewSave.frame.height)
                    self.capturePreviewView.alpha = 0.10
              self.navigationController?.setNavigationBarHidden(true, animated: true)
                
            }, completion: nil)
        }
        else
        {
            UIView.animate(withDuration: 0.25, animations: {
                self.viewSave.frame = CGRect(x: 0, y: self.viewSave.frame.origin.y+self.view.frame.height-50, width: self.viewSave.frame.width, height: self.viewSave.frame.height)
                
                self.capturePreviewView.alpha = 1
                self.navigationController?.setNavigationBarHidden(false, animated: true)
            }, completion: nil)
        }
    }
    
    func presentSaveView () {
        
        self.viewSave.frame = CGRect (x: 0, y: self.view.frame.height, width: self.viewSave.frame.width, height: self.viewSave.frame.height)
        
        viewSave.round(corners: [.topLeft, .topRight], radius: 30)
        
        imageToSave.layer.borderWidth = 5
        imageToSave.layer.borderColor = UIColor.white.cgColor
        
        currentDayLabelVC003.text = getCurrentDay
        commentPhotoLabelVC003.text = getComment
       previewDateTemp.isHidden = true
    }
    func configureSWitchPreview() {
        
        
    }
}
extension ViewController003b: UINavigationControllerDelegate {
    
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
            print("no gira la cámara")
        }
        
        switch cameraController.currentCameraPosition {
        
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
        
        self.animationON(disponible: true)
        
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            
            self.imageSave = image
            
            self.imageToSave.image = image
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
        }
    }
    
}
extension UIView {
    func round(corners: UIRectCorner, radius: CGFloat) {
        let path = UIBezierPath(roundedRect: bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        let mask = CAShapeLayer()
        mask.path = path.cgPath
        self.layer.mask = mask
    }
}

func calculateRectOfImageInImageView(imageView: UIImageView) -> CGRect {
    let imageViewSize = imageView.frame.size
    let imgSize = imageView.image?.size
    
    guard let imageSize = imgSize else {
        return CGRect.zero
    }
    
    let scaleWidth = imageViewSize.width / imageSize.width
    let scaleHeight = imageViewSize.height / imageSize.height
    let aspect = fmin(scaleWidth, scaleHeight)
    
    var imageRect = CGRect(x: 0, y: 0, width: imageSize.width * aspect, height: imageSize.height * aspect)
    // Center image
    imageRect.origin.x = (imageViewSize.width - imageRect.size.width) / 2
    imageRect.origin.y = (imageViewSize.height - imageRect.size.height) / 2
    
    // Add imageView offset
    imageRect.origin.x += imageView.frame.origin.x
    imageRect.origin.y += imageView.frame.origin.y
    
    return imageRect
}
